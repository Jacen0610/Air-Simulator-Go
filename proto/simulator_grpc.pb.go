// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: simulator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimulatorClient is the client API for Simulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulatorClient interface {
	// Step 方法：让所有智能体执行一步动作
	Step(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error)
	// Reset 方法：重置整个模拟环境
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type simulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulatorClient(cc grpc.ClientConnInterface) SimulatorClient {
	return &simulatorClient{cc}
}

func (c *simulatorClient) Step(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error) {
	out := new(StepResponse)
	err := c.cc.Invoke(ctx, "/proto.Simulator/Step", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulatorClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/proto.Simulator/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulatorServer is the server API for Simulator service.
// All implementations must embed UnimplementedSimulatorServer
// for forward compatibility
type SimulatorServer interface {
	// Step 方法：让所有智能体执行一步动作
	Step(context.Context, *StepRequest) (*StepResponse, error)
	// Reset 方法：重置整个模拟环境
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	mustEmbedUnimplementedSimulatorServer()
}

// UnimplementedSimulatorServer must be embedded to have forward compatible implementations.
type UnimplementedSimulatorServer struct {
}

func (UnimplementedSimulatorServer) Step(context.Context, *StepRequest) (*StepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Step not implemented")
}
func (UnimplementedSimulatorServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedSimulatorServer) mustEmbedUnimplementedSimulatorServer() {}

// UnsafeSimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulatorServer will
// result in compilation errors.
type UnsafeSimulatorServer interface {
	mustEmbedUnimplementedSimulatorServer()
}

func RegisterSimulatorServer(s grpc.ServiceRegistrar, srv SimulatorServer) {
	s.RegisterService(&Simulator_ServiceDesc, srv)
}

func _Simulator_Step_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).Step(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Simulator/Step",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).Step(ctx, req.(*StepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simulator_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulatorServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Simulator/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulatorServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Simulator_ServiceDesc is the grpc.ServiceDesc for Simulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Simulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Simulator",
	HandlerType: (*SimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Step",
			Handler:    _Simulator_Step_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Simulator_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simulator.proto",
}
