// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/rl_environment.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RLEnvironmentClient is the client API for RLEnvironment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RLEnvironmentClient interface {
	// 重置环境并返回初始状态
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*State, error)
	// 执行一个动作，推进环境一步，并返回结果
	Step(ctx context.Context, in *Action, opts ...grpc.CallOption) (*StepResponse, error)
}

type rLEnvironmentClient struct {
	cc grpc.ClientConnInterface
}

func NewRLEnvironmentClient(cc grpc.ClientConnInterface) RLEnvironmentClient {
	return &rLEnvironmentClient{cc}
}

func (c *rLEnvironmentClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/environment.RLEnvironment/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rLEnvironmentClient) Step(ctx context.Context, in *Action, opts ...grpc.CallOption) (*StepResponse, error) {
	out := new(StepResponse)
	err := c.cc.Invoke(ctx, "/environment.RLEnvironment/Step", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RLEnvironmentServer is the server API for RLEnvironment service.
// All implementations must embed UnimplementedRLEnvironmentServer
// for forward compatibility
type RLEnvironmentServer interface {
	// 重置环境并返回初始状态
	Reset(context.Context, *ResetRequest) (*State, error)
	// 执行一个动作，推进环境一步，并返回结果
	Step(context.Context, *Action) (*StepResponse, error)
	mustEmbedUnimplementedRLEnvironmentServer()
}

// UnimplementedRLEnvironmentServer must be embedded to have forward compatible implementations.
type UnimplementedRLEnvironmentServer struct {
}

func (UnimplementedRLEnvironmentServer) Reset(context.Context, *ResetRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedRLEnvironmentServer) Step(context.Context, *Action) (*StepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Step not implemented")
}
func (UnimplementedRLEnvironmentServer) mustEmbedUnimplementedRLEnvironmentServer() {}

// UnsafeRLEnvironmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RLEnvironmentServer will
// result in compilation errors.
type UnsafeRLEnvironmentServer interface {
	mustEmbedUnimplementedRLEnvironmentServer()
}

func RegisterRLEnvironmentServer(s grpc.ServiceRegistrar, srv RLEnvironmentServer) {
	s.RegisterService(&RLEnvironment_ServiceDesc, srv)
}

func _RLEnvironment_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RLEnvironmentServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.RLEnvironment/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RLEnvironmentServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RLEnvironment_Step_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RLEnvironmentServer).Step(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.RLEnvironment/Step",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RLEnvironmentServer).Step(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

// RLEnvironment_ServiceDesc is the grpc.ServiceDesc for RLEnvironment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RLEnvironment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "environment.RLEnvironment",
	HandlerType: (*RLEnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reset",
			Handler:    _RLEnvironment_Reset_Handler,
		},
		{
			MethodName: "Step",
			Handler:    _RLEnvironment_Step_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/rl_environment.proto",
}
